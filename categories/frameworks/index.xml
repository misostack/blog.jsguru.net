<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>frameworks on 1 hour of deep work is better than 8 hours of shallow work</title><link>//blog.jsguru.net/categories/frameworks/</link><description>Recent content in frameworks on 1 hour of deep work is better than 8 hours of shallow work</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 04 Aug 2022 10:46:09 +0700</lastBuildDate><atom:link href="//blog.jsguru.net/categories/frameworks/index.xml" rel="self" type="application/rss+xml"/><item><title>Nestjs Pipes</title><link>//blog.jsguru.net/post/nestjs-pipes/</link><pubDate>Thu, 04 Aug 2022 10:46:09 +0700</pubDate><guid>//blog.jsguru.net/post/nestjs-pipes/</guid><description>As you&amp;rsquo;ve known, in a request we will have:
Route Params ( included in URL ) Query Params ( included in URL ) Body ( json/form-data/multipart/form-data ) There are 2 ways to get these values
Library specific Approach - Express import { Controller, Req, Res } from &amp;#34;@nestjs/common&amp;#34;; import { Request, Response } from &amp;#34;express&amp;#34;; @Controller(&amp;#34;examples&amp;#34;) export class ExamplesController { @Post(&amp;#34;request-object/express/:email&amp;#34;) exampleRequestObjectExpress(@Req() req: Request, @Res() res: Response) { const responseData = { approach: &amp;#34;express&amp;#34;, routeParams: req.</description></item><item><title>Validate Request Input in Nestjs</title><link>//blog.jsguru.net/post/validate-request-input-in-nestjs/</link><pubDate>Fri, 29 Jul 2022 15:17:27 +0700</pubDate><guid>//blog.jsguru.net/post/validate-request-input-in-nestjs/</guid><description>It is best practice to validate the correctness of any data sent into a web application
There are several libraries support us to verify data :
json schema joi validator And in typescript, we have a special library that support decorator
Class Validator - internally uses validator.js to perform validation. Class-validator works on both browser and node.js platforms Let&amp;rsquo;s dive in class validator usage example.</description></item><item><title>Nestjs Provider</title><link>//blog.jsguru.net/post/nestjs-provider/</link><pubDate>Thu, 28 Jul 2022 14:41:08 +0700</pubDate><guid>//blog.jsguru.net/post/nestjs-provider/</guid><description>Many of the basic Nest classes may be treated as a provider:
Services Repositories Factories Helpers The main idea of a provider is that it can be injected as a dependency
This means NestJS will be act as a container and creating relationship between objects and wire them up at runtime
When creating a provider, we should consider these aspects
Dependency Inject Scopes Custom provider Optional providers Using service provider in controller Creating service</description></item><item><title>Developer Your Rest Api With Nestjs</title><link>//blog.jsguru.net/post/developer-your-rest-api-with-nestjs/</link><pubDate>Tue, 12 Jul 2022 11:39:11 +0700</pubDate><guid>//blog.jsguru.net/post/developer-your-rest-api-with-nestjs/</guid><description>Ứng dụng Xây dựng REST API cung cấp dữ liệu thời gian thực giá vàng
Tính năng cập nhật giá vàng Cập nhật giá vàng theo ngày : nhập thông thường Cập nhật giá vàng hàng loạt: import tập tin excel theo định dạng Cập nhật giá vàng tự động: thiết lập link liên kết lấy giá vàng, khoảng thời gian lấy Tính năng hiển thị giá vàng Dạng hiện thị : dạng bảng hoặc dạng biểu đồ</description></item><item><title>Create New Website With Nextjs</title><link>//blog.jsguru.net/post/create-new-website-with-nextjs/</link><pubDate>Tue, 12 Jul 2022 11:38:00 +0700</pubDate><guid>//blog.jsguru.net/post/create-new-website-with-nextjs/</guid><description/></item></channel></rss>